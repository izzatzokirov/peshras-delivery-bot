from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import time
from threading import Thread, Lock
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-10031287885760"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
orders_status = {}
status_lock = Lock()

def send_to_telegram(order_data):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üõí –ó–∞–∫–∞–∑ #{order_data.get('order_num', 'N/A')}\n\n"
        
        # –¢–æ–≤–∞—Ä—ã
        if 'line' in order_data and isinstance(order_data['line'], list):
            for i, item in enumerate(order_data['line'], 1):
                if item.get('order_line_type_id') == 1:
                    name = item.get('order_line_name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('order_line_quantity', 1)
                    art = item.get('order_line_art_number', '–±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
                    message += f"{i}. {name} {quantity}—à—Ç. –∞—Ä—Ç {art}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        payment_method = order_data.get('payment_name', '–ù–∞–ª–∏—á–Ω—ã–µ')
        message += f"\nüí∞ –°—É–º–º–∞: {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏"
        message += f"\nüí≥ –û–ø–ª–∞—Ç–∞: {payment_method}"
        
        phone = order_data.get('order_phone', '')
        if phone:
            message += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>"
        
        message += f"\nüë§ –ò–º—è: {order_data.get('order_person', 'N/A')}"
        message += f"\nüè† –ê–¥—Ä–µ—Å: {order_data.get('order_address', 'N/A')}"
        message += f"\n‚è∞ –í—Ä–µ–º—è: {convert_unix_time(order_data.get('order_time', ''))}"
        
        comment = order_data.get('order_comment', '')
        if comment:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

        # –ö–Ω–æ–ø–∫–∏
        order_num = order_data.get('order_num', '')
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_num}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"}
                ],
                [
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard,
            "disable_web_page_preview": True
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def convert_unix_time(unix_time):
    try:
        return datetime.fromtimestamp(int(unix_time)).strftime('%Y-%m-%d %H:%M:%S')
    except:
        return unix_time

def handle_callback_updates():
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?timeout=10"
            response = requests.get(url, timeout=15)
            data = response.json()
            
            if data["ok"] and data["result"]:
                for update in data["result"]:
                    if "callback_query" in update:
                        query = update["callback_query"]
                        callback_data = query["data"]
                        user_id = query["from"]["id"]
                        username = query["from"].get("username", query["from"]["first_name"])
                        
                        if callback_data.startswith(("accept_", "delivery_", "delivered_")):
                            order_num = callback_data.split("_")[1]
                            message_id = query["message"]["message_id"]
                            current_text = query["message"]["text"]
                            
                            with status_lock:
                                current_status = orders_status.get(order_num, {})
                                
                                # –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ
                                can_perform_action = False
                                action_type = callback_data.split("_")[0]
                                
                                if action_type == "accept":
                                    if "status" not in current_status:
                                        can_perform_action = True
                                        orders_status[order_num] = {
                                            "status": "accepted", 
                                            "courier_id": user_id,
                                            "courier_name": username
                                        }
                                    
                                elif action_type == "delivery":
                                    if (current_status.get("status") == "accepted" and 
                                        current_status.get("courier_id") == user_id):
                                        can_perform_action = True
                                        orders_status[order_num]["status"] = "delivery"
                                    
                                elif action_type == "delivered":
                                    if (current_status.get("status") in ["accepted", "delivery"] and 
                                        current_status.get("courier_id") == user_id):
                                        can_perform_action = True
                                        orders_status[order_num]["status"] = "delivered"
                                
                                # –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–Ø
                                if can_perform_action:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                    status_texts = {
                                        "accept": f"\n\n‚úÖ –ü—Ä–∏–Ω—è–ª: @{username}",
                                        "delivery": f"\n\nüöó –í –ø—É—Ç–∏: @{username}",
                                        "delivered": f"\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: @{username}"
                                    }
                                    
                                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
                                    cleaned_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', current_text)
                                    new_text = cleaned_text + status_texts[action_type]
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
                                    payload = {
                                        "chat_id": CHANNEL_ID,
                                        "message_id": message_id,
                                        "text": new_text,
                                        "parse_mode": "HTML",
                                        "reply_markup": query["message"]["reply_markup"],
                                        "disable_web_page_preview": True
                                    }
                                    requests.post(edit_url, json=payload)
                                    
                                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                                    answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                                    requests.post(answer_url, json={
                                        "callback_query_id": query["id"],
                                        "text": "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!"
                                    })
                                    
                                else:
                                    # –û—à–∏–±–∫–∞ - –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å
                                    error_messages = {
                                        "accept": "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º!",
                                        "delivery": "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!",
                                        "delivered": "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —á—É–∂–æ–π –∑–∞–∫–∞–∑!"
                                    }
                                    
                                    answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                                    requests.post(answer_url, json={
                                        "callback_query_id": query["id"],
                                        "text": error_messages.get(action_type, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"),
                                        "show_alert": True
                                    })
            
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            time.sleep(5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
callback_thread = Thread(target=handle_callback_updates, daemon=True)
callback_thread.start()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        order_data_str = request.form.get('order_data')
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data"}), 400
        
        import json
        order_data = json.loads(order_data_str)
        
        success = send_to_telegram(order_data)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error"}), 400

@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

if __name__ == '__main__':
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω!")
    app.run(host='0.0.0.0', port=5000)
