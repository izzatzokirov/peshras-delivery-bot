from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
orders_db = {}
last_updates = {}

def send_to_telegram(order_data):
    try:
        order_num = order_data.get('order_num', 'N/A')
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        current_time = time.time()
        if order_num in last_updates:
            if current_time - last_updates[order_num] < 300:
                logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∑–∞–∫–∞–∑–∞ #{order_num} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                return True
        
        last_updates[order_num] = current_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üõí –ó–∞–∫–∞–∑ #{order_num}\n\n"
        
        # –¢–æ–≤–∞—Ä—ã
        if 'line' in order_data and isinstance(order_data['line'], list):
            for i, item in enumerate(order_data['line'], 1):
                if item.get('order_line_type_id') == 1:
                    name = item.get('order_line_name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('order_line_quantity', 1)
                    art = item.get('order_line_art_number', '–±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
                    message += f"{i}. {name} {quantity}—à—Ç. –∞—Ä—Ç {art}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        message += f"\nüí∞ –°—É–º–º–∞: {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏"
        message += f"\nüí≥ –û–ø–ª–∞—Ç–∞: {order_data.get('payment_name', '–ù–∞–ª–∏—á–Ω—ã–µ')}"
        
        phone = order_data.get('order_phone', '')
        if phone:
            message += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>"
        
        message += f"\nüë§ –ò–º—è: {order_data.get('order_person', 'N/A')}"
        message += f"\nüè† –ê–¥—Ä–µ—Å: {order_data.get('order_address', 'N/A')}"
        message += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        comment = order_data.get('order_comment', '')
        if comment:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

        # –ö–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_num}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard,
            "disable_web_page_preview": True
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message_id = response.json()['result']['message_id']
            orders_db[order_num] = {
                'message_id': message_id,
                'status': 'new',
                'courier': None
            }
            return True
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def update_buttons(order_num, status, username):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è"""
    try:
        if order_num not in orders_db:
            return False
            
        message_id = orders_db[order_num]['message_id']
        orders_db[order_num]['status'] = status
        orders_db[order_num]['courier'] = username
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChat?chat_id={CHANNEL_ID}"
        response = requests.get(url)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageReplyMarkup"
        
        if status == 'accepted':
            new_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                        {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                    ]
                ]
            }
        elif status == 'delivery':
            new_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                    ]
                ]
            }
        else:  # delivered
            new_keyboard = {"inline_keyboard": []}  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        
        payload = {
            "chat_id": CHANNEL_ID,
            "message_id": message_id,
            "reply_markup": new_keyboard
        }
        
        response = requests.post(edit_url, json=payload)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
        return False

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        order_data_str = request.form.get('order_data')
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data"}), 400
        
        import json
        order_data = json.loads(order_data_str)
        
        success = send_to_telegram(order_data)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error"}), 400

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@app.route('/button/<action>/<order_num>/<username>')
def handle_button(action, order_num, username):
    try:
        if order_num not in orders_db:
            return "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", 400
        
        current_status = orders_db[order_num]['status']
        
        if action == "accept" and current_status == "new":
            success = update_buttons(order_num, "accepted", username)
            return "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!" if success else "‚ùå –û—à–∏–±–∫–∞"
            
        elif action == "delivery" and current_status == "accepted":
            success = update_buttons(order_num, "delivery", username)
            return "üöó –ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏!" if success else "‚ùå –û—à–∏–±–∫–∞"
            
        elif action == "delivered" and current_status in ["accepted", "delivery"]:
            success = update_buttons(order_num, "delivered", username)
            return "‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!" if success else "‚ùå –û—à–∏–±–∫–∞"
            
        return "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", 400
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}", 500

@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

if __name__ == '__main__':
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!")
    app.run(host='0.0.0.0', port=5000)
