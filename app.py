from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

def send_to_telegram(order_data):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
        message = f"üõí –ó–∞–∫–∞–∑ #{order_data.get('order_num', 'N/A')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
        if 'line' in order_data and isinstance(order_data['line'], list):
            for i, item in enumerate(order_data['line'], 1):
                if item.get('order_line_type_id') == 1:  # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã
                    name = item.get('order_line_name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('order_line_quantity', 1)
                    art = item.get('order_line_art_number', '–±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
                    price = item.get('order_line_sum', 0)
                    
                    message += f"{i}. {name} {quantity}—à—Ç. –∞—Ä—Ç {art}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message += f"\nüí∞ –°—É–º–º–∞: {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏\n"
        message += f"üë§ –ò–º—è: {order_data.get('order_person', 'N/A')}\n"
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('order_phone', 'N/A')}\n"
        message += f"üè† –ê–¥—Ä–µ—Å: {order_data.get('order_address', 'N/A')}\n"
        message += f"‚è∞ –í—Ä–µ–º—è: {convert_unix_time(order_data.get('order_time', ''))}\n"
        message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('order_comment', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"accept_{order_data.get('order_num')}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_data.get('order_num')}"}
                ],
                [
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_data.get('order_num')}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def convert_unix_time(unix_time):
    try:
        return datetime.fromtimestamp(int(unix_time)).strftime('%Y-%m-%d %H:%M:%S')
    except:
        return unix_time

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        order_data_str = request.form.get('order_data')
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data"}), 400
        
        import json
        order_data = json.loads(order_data_str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        success = send_to_telegram(order_data)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error"}), 400

@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from threading import Thread
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
orders_status = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
def handle_callback_updates():
    """–û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if data["ok"] and data["result"]:
                for update in data["result"]:
                    if "callback_query" in update:
                        query = update["callback_query"]
                        message_id = query["message"]["message_id"]
                        callback_data = query["data"]
                        username = query["from"].get("username", query["from"]["first_name"])
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        if callback_data.startswith("accept_"):
                            order_num = callback_data.split("_")[1]
                            orders_status[order_num] = {"status": "–ø—Ä–∏–Ω—è—Ç", "courier": username}
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            new_text = query["message"]["text"] + f"\n\n‚úÖ –ü—Ä–∏–Ω—è–ª: @{username}"
                            edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
                            payload = {
                                "chat_id": CHANNEL_ID,
                                "message_id": message_id,
                                "text": new_text,
                                "parse_mode": "HTML"
                            }
                            requests.post(edit_url, json=payload)
                            
                        elif callback_data.startswith("delivery_"):
                            order_num = callback_data.split("_")[1]
                            orders_status[order_num] = {"status": "–≤ –ø—É—Ç–∏", "courier": username}
                            
                            new_text = query["message"]["text"] + f"\n\nüöó –í –ø—É—Ç–∏: @{username}"
                            edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
                            payload = {
                                "chat_id": CHANNEL_ID,
                                "message_id": message_id,
                                "text": new_text,
                                "parse_mode": "HTML"
                            }
                            requests.post(edit_url, json=payload)
                            
                        elif callback_data.startswith("delivered_"):
                            order_num = callback_data.split("_")[1]
                            orders_status[order_num] = {"status": "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", "courier": username}
                            
                            new_text = query["message"]["text"] + f"\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: @{username}"
                            edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
                            payload = {
                                "chat_id": CHANNEL_ID,
                                "message_id": message_id,
                                "text": new_text,
                                "parse_mode": "HTML"
                            }
                            requests.post(edit_url, json=payload)
                        
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
                        answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                        requests.post(answer_url, json={"callback_query_id": query["id"]})
            
            time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            time.sleep(5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
callback_thread = Thread(target=handle_callback_updates, daemon=True)
callback_thread.start()

logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω!")
