from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
from flask import Flask, request, jsonify
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –ó–î–ï–°–¨ –í–ê–®–ò –î–ê–ù–ù–´–ï!
BOT_TOKEN = os.getenv("BOT_TOKEN", "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA")
CHANNEL_ID = os.getenv("CHANNEL_ID", "-1002108941132")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_instance = None

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    global bot_instance
    try:
        from telegram import Bot
        bot_instance = Bot(token=BOT_TOKEN)
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–∞–ª
def send_order_to_channel(order_data):
    global bot_instance
    try:
        if bot_instance is None:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
            if not initialize_bot():
                return False

        message_text = f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó #_{order_data.get('id', 'N/A')}_\n"
        message_text += f"üë§ –ò–º—è: {order_data.get('customer_name', 'N/A')}\n"
        message_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{order_data.get('customer_phone', 'N/A')}`\n"
        message_text += f"üè† –ê–¥—Ä–µ—Å: {order_data.get('customer_address', 'N/A')}\n\n"
        
        message_text += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        items = order_data.get('items', [])
        if isinstance(items, list):
            for item in items:
                message_text += f"‚Ä¢ {item.get('name', '–¢–æ–≤–∞—Ä')} x {item.get('quantity', 1)} - {item.get('price', 0)} —Å–æ–º–æ–Ω–∏\n"
        else:
            message_text += "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        message_text += f"\nüíµ –°—É–º–º–∞: {order_data.get('total_amount', 0)} —Å–æ–º–æ–Ω–∏\n"
        message_text += f"‚è∞ –í—Ä–µ–º—è: {order_data.get('order_time', 'N/A')}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ (–ø–æ–∫–∞ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data="accept")],
            [InlineKeyboardButton("üöó –í –ø—É—Ç–∏", callback_data="delivery")],
            [InlineKeyboardButton("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="delivered")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        bot_instance.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

# Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç storelend.ru
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç storelend")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        order_data = {}
        
        # –ü—Ä–æ–±—É–µ–º JSON
        try:
            data = request.get_json()
            if data:
                if 'order_data' in data:
                    order_data = data['order_data']
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å order_data")
                else:
                    order_data = data
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ –ø—Ä—è–º–æ–π JSON")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON: {e}")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã - –ø—Ä–æ–±—É–µ–º form-data
        if not order_data:
            try:
                order_data_str = request.form.get('order_data')
                if order_data_str:
                    import json
                    order_data = json.loads(order_data_str)
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ form-data")
            except:
                pass
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∂–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not order_data:
            raw_data = request.get_data(as_text=True)
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")
            return jsonify({"status": "error", "message": "Invalid data format"}), 400
        
        logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        success = send_order_to_channel(order_data)
        
        if success:
            logger.info("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            return jsonify({"status": "success", "message": "Order processed"})
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram")
            return jsonify({"status": "error", "message": "Telegram send failed"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 400

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Peshras Delivery Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    initialize_bot()
    
    app.run(host='0.0.0.0', port=5000, debug=False)
