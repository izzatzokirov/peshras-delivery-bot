from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import time
from threading import Thread, Lock
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
orders_status = {}
orders_lock = Lock()

def send_to_telegram(order_data):
    try:
        # ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è) ...
        # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_num = order_data.get('order_num', '')
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_num}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                ]
            ]
        }

        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏) ...

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def handle_callback_updates():
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?timeout=10"
            response = requests.get(url, timeout=15)
            data = response.json()
            
            if data["ok"] and data["result"]:
                for update in data["result"]:
                    if "callback_query" in update:
                        query = update["callback_query"]
                        callback_data = query["data"]
                        user_id = query["from"]["id"]
                        username = query["from"].get("username", query["from"]["first_name"])
                        message_id = query["message"]["message_id"]
                        current_text = query["message"]["text"]
                        
                        if callback_data.startswith(("accept_", "delivery_", "delivered_")):
                            order_num = callback_data.split("_")[1]
                            action_type = callback_data.split("_")[0]
                            
                            with orders_lock:
                                current_status = orders_status.get(order_num, {})
                                
                                # –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–ï–ô–°–¢–í–ò–Ø
                                can_perform_action = False
                                
                                if action_type == "accept":
                                    if "status" not in current_status:
                                        can_perform_action = True
                                        orders_status[order_num] = {
                                            "status": "accepted", 
                                            "courier_id": user_id,
                                            "courier_name": username
                                        }
                                    
                                elif action_type == "delivery":
                                    if (current_status.get("status") == "accepted" and 
                                        current_status.get("courier_id") == user_id):
                                        can_perform_action = True
                                        orders_status[order_num]["status"] = "delivery"
                                    
                                elif action_type == "delivered":
                                    if (current_status.get("status") in ["accepted", "delivery"] and 
                                        current_status.get("courier_id") == user_id):
                                        can_perform_action = True
                                        orders_status[order_num]["status"] = "delivered"
                                
                                # –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–Ø
                                if can_perform_action:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                    status_texts = {
                                        "accept": f"\n\n‚úÖ –ü—Ä–∏–Ω—è–ª: @{username}",
                                        "delivery": f"\n\nüöó –í –ø—É—Ç–∏: @{username}", 
                                        "delivered": f"\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: @{username}"
                                    }
                                    
                                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
                                    cleaned_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', current_text)
                                    new_text = cleaned_text + status_texts[action_type]
                                    
                                    # –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ù–û–í–´–ï –ö–ù–û–ü–ö–ò –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –°–¢–ê–¢–£–°–ê
                                    new_keyboard = None
                                    
                                    if action_type == "accept":
                                        # –ü–æ—Å–ª–µ "–ü—Ä–∏–Ω—è—Ç—å" –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–í –ø—É—Ç–∏" –∏ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                                        new_keyboard = {
                                            "inline_keyboard": [
                                                [
                                                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                                                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                                                ]
                                            ]
                                        }
                                    elif action_type == "delivery":
                                        # –ü–æ—Å–ª–µ "–í –ø—É—Ç–∏" –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                                        new_keyboard = {
                                            "inline_keyboard": [
                                                [
                                                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                                                ]
                                            ]
                                        }
                                    elif action_type == "delivered":
                                        # –ü–æ—Å–ª–µ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                                        new_keyboard = {"inline_keyboard": []}
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
                                    payload = {
                                        "chat_id": CHANNEL_ID,
                                        "message_id": message_id,
                                        "text": new_text,
                                        "parse_mode": "HTML",
                                        "reply_markup": new_keyboard,
                                        "disable_web_page_preview": True
                                    }
                                    requests.post(edit_url, json=payload)
                                    
                                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                                    answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                                    requests.post(answer_url, json={
                                        "callback_query_id": query["id"],
                                        "text": "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!"
                                    })
                                    
                                else:
                                    # –û—à–∏–±–∫–∞ - –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å
                                    error_messages = {
                                        "accept": "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º!",
                                        "delivery": "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!",
                                        "delivered": "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —á—É–∂–æ–π –∑–∞–∫–∞–∑!"
                                    }
                                    
                                    answer_url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
                                    requests.post(answer_url, json={
                                        "callback_query_id": query["id"],
                                        "text": error_messages.get(action_type, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"),
                                        "show_alert": True
                                    })
            
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            time.sleep(5)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
