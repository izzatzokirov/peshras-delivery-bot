from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
orders_status = {}

def send_to_telegram(order_data):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üõí –ó–∞–∫–∞–∑ #{order_data.get('order_num', 'N/A')}\n\n"
        
        # –¢–æ–≤–∞—Ä—ã
        if 'line' in order_data and isinstance(order_data['line'], list):
            for i, item in enumerate(order_data['line'], 1):
                if item.get('order_line_type_id') == 1:
                    name = item.get('order_line_name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('order_line_quantity', 1)
                    art = item.get('order_line_art_number', '–±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
                    message += f"{i}. {name} {quantity}—à—Ç. –∞—Ä—Ç {art}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        payment_method = order_data.get('payment_name', '–ù–∞–ª–∏—á–Ω—ã–µ')
        message += f"\nüí∞ –°—É–º–º–∞: {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏"
        message += f"\nüí≥ –û–ø–ª–∞—Ç–∞: {payment_method}"
        
        phone = order_data.get('order_phone', '')
        if phone:
            message += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>"
        
        message += f"\nüë§ –ò–º—è: {order_data.get('order_person', 'N/A')}"
        message += f"\nüè† –ê–¥—Ä–µ—Å: {order_data.get('order_address', 'N/A')}"
        message += f"\n‚è∞ –í—Ä–µ–º—è: {convert_unix_time(order_data.get('order_time', ''))}"
        
        comment = order_data.get('order_comment', '')
        if comment:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–≤—Å–µ –≤–∏–¥–∏–º—ã–µ)
        order_num = order_data.get('order_num', '')
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_num}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard,
            "disable_web_page_preview": True
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def convert_unix_time(unix_time):
    try:
        return datetime.fromtimestamp(int(unix_time)).strftime('%Y-%m-%d %H:%M:%S')
    except:
        return unix_time

def update_message_with_new_buttons(message_id, new_text, new_keyboard):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        edit_url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
        payload = {
            "chat_id": CHANNEL_ID,
            "message_id": message_id,
            "text": new_text,
            "parse_mode": "HTML",
            "reply_markup": new_keyboard,
            "disable_web_page_preview": True
        }
        response = requests.post(edit_url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        order_data_str = request.form.get('order_data')
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data"}), 400
        
        import json
        order_data = json.loads(order_data_str)
        
        success = send_to_telegram(order_data)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error"}), 400

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏)
@app.route('/callback', methods=['POST'])
def callback_handler():
    try:
        data = request.json
        if 'callback_query' in data:
            query = data['callback_query']
            callback_data = query['data']
            user_id = query['from']['id']
            username = query['from'].get('username', query['from']['first_name'])
            message_id = query['message']['message_id']
            current_text = query['message']['text']
            
            if callback_data.startswith(("accept_", "delivery_", "delivered_")):
                order_num = callback_data.split('_')[1]
                action_type = callback_data.split('_')[0]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                if action_type == "accept":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
                    if order_num not in orders_status:
                        orders_status[order_num] = {
                            'status': 'accepted',
                            'courier_id': user_id,
                            'courier_name': username
                        }
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
                        new_text = current_text + f"\n\n‚úÖ –ü—Ä–∏–Ω—è–ª: @{username}"
                        new_keyboard = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                                ]
                            ]
                        }
                        
                        if update_message_with_new_buttons(message_id, new_text, new_keyboard):
                            return jsonify({"status": "success"})
                
                elif action_type == "delivery":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —ç—Ç–∏–º –∫—É—Ä—å–µ—Ä–æ–º
                    if (order_num in orders_status and 
                        orders_status[order_num]['courier_id'] == user_id):
                        
                        new_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', current_text)
                        new_text += f"\n\nüöó –í –ø—É—Ç–∏: @{username}"
                        new_keyboard = {
                            "inline_keyboard": [
                                [
                                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                                ]
                            ]
                        }
                        
                        if update_message_with_new_buttons(message_id, new_text, new_keyboard):
                            return jsonify({"status": "success"})
                
                elif action_type == "delivered":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —ç—Ç–∏–º –∫—É—Ä—å–µ—Ä–æ–º
                    if (order_num in orders_status and 
                        orders_status[order_num]['courier_id'] == user_id):
                        
                        new_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', current_text)
                        new_text += f"\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: @{username}"
                        new_keyboard = {"inline_keyboard": []}  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                        
                        if update_message_with_new_buttons(message_id, new_text, new_keyboard):
                            return jsonify({"status": "success"})
                
                return jsonify({"status": "error", "message": "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"}), 400
        
        return jsonify({"status": "success"})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        return jsonify({"status": "error"}), 500

@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

if __name__ == '__main__':
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    app.run(host='0.0.0.0', port=5000)
