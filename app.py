# Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç storelend.ru
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        raw_data = request.get_data(as_text=True)
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        order_data = {}
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: JSON —Å –ø–æ–ª–µ–º order_data
        try:
            data = request.json
            if data and 'order_data' in data:
                order_data = data['order_data']
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å order_data")
        except:
            pass
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º–æ–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if not order_data:
            try:
                order_data = request.json
                if order_data:
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ –ø—Ä—è–º–æ–π JSON")
            except:
                pass
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: Form-data –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if not order_data:
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ form-data
                order_data_str = request.form.get('order_data')
                if order_data_str:
                    import json
                    order_data = json.loads(order_data_str)
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ form-data")
            except:
                pass
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        if not order_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞")
            logger.error(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")
            logger.error(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
            return jsonify({"status": "error", "message": "Invalid data format"}), 400
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üì¶ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram –∫–∞–Ω–∞–ª
        success = asyncio.run(send_order_to_channel(order_data))
        
        if success:
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order_data.get('id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            return jsonify({"status": "success", "message": "Order processed"})
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_data.get('id')} –≤ Telegram")
            return jsonify({"status": "error", "message": "Telegram send failed"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 400
