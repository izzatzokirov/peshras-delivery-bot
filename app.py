from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
orders_db = {}
processed_orders = {}

def send_to_telegram(order_data):
    try:
        order_num = order_data.get('order_num', 'N/A')
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        current_time = time.time()
        if order_num in processed_orders:
            if current_time - processed_orders[order_num] < 300:
                logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∑–∞–∫–∞–∑–∞ #{order_num} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                return True
        
        processed_orders[order_num] = current_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üõí –ó–∞–∫–∞–∑ #{order_num}\n\n"
        
        # –¢–æ–≤–∞—Ä—ã
        if 'line' in order_data and isinstance(order_data['line'], list):
            for i, item in enumerate(order_data['line'], 1):
                if item.get('order_line_type_id') == 1:
                    name = item.get('order_line_name', '–¢–æ–≤–∞—Ä')
                    quantity = item.get('order_line_quantity', 1)
                    art = item.get('order_line_art_number', '–±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
                    message += f"{i}. {name} {quantity}—à—Ç. –∞—Ä—Ç {art}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        payment_method = order_data.get('payment_name', '–ù–∞–ª–∏—á–Ω—ã–µ')
        message += f"\nüí∞ –°—É–º–º–∞: {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏"
        message += f"\nüí≥ –û–ø–ª–∞—Ç–∞: {payment_method}"
        
        phone = order_data.get('order_phone', '')
        if phone:
            message += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>"
        
        message += f"\nüë§ –ò–º—è: {order_data.get('order_person', 'N/A')}"
        message += f"\nüè† –ê–¥—Ä–µ—Å: {order_data.get('order_address', 'N/A')}"
        message += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        comment = order_data.get('order_comment', '')
        if comment:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_num}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard,
            "disable_web_page_preview": True
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = response.json()['result']['message_id']
            orders_db[order_num] = {
                'message_id': message_id,
                'status': 'new',
                'courier': None,
                'message_text': message
            }
            return True
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def update_telegram_message(order_num, new_text, new_keyboard=None):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        if order_num not in orders_db:
            return False
            
        message_id = orders_db[order_num]['message_id']
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
        payload = {
            "chat_id": CHANNEL_ID,
            "message_id": message_id,
            "text": new_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        if new_keyboard:
            payload["reply_markup"] = new_keyboard
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def handle_order_action(order_num, action, username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º"""
    try:
        if order_num not in orders_db:
            return False, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        current_status = orders_db[order_num]['status']
        current_courier = orders_db[order_num]['courier']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
        if action == "accept":
            if current_status != "new":
                return False, "–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç"
                
            orders_db[order_num]['status'] = "accepted"
            orders_db[order_num]['courier'] = username
            
            new_text = orders_db[order_num]['message_text'] + f"\n\n‚úÖ –ü—Ä–∏–Ω—è–ª: @{username}"
            new_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_num}"},
                        {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                    ]
                ]
            }
            
        elif action == "delivery":
            if current_status != "accepted" or current_courier != username:
                return False, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
                
            orders_db[order_num]['status'] = "delivery"
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            original_text = orders_db[order_num]['message_text']
            cleaned_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', original_text)
            new_text = cleaned_text + f"\n\nüöó –í –ø—É—Ç–∏: @{username}"
            new_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_num}"}
                    ]
                ]
            }
            
        elif action == "delivered":
            if current_status not in ["accepted", "delivery"] or current_courier != username:
                return False, "–ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º"
                
            orders_db[order_num]['status'] = "delivered"
            
            original_text = orders_db[order_num]['message_text']
            cleaned_text = re.sub(r'\n\n‚úÖ –ü—Ä–∏–Ω—è–ª:.*|\n\nüöó –í –ø—É—Ç–∏:.*|\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω:.*', '', original_text)
            new_text = cleaned_text + f"\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: @{username}"
            new_keyboard = {"inline_keyboard": []}  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            
        else:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        success = update_telegram_message(order_num, new_text, new_keyboard)
        if success:
            orders_db[order_num]['message_text'] = new_text
            return True, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            return False, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        return False, "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        order_data_str = request.form.get('order_data')
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data"}), 400
        
        import json
        order_data = json.loads(order_data_str)
        
        success = send_to_telegram(order_data)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error"}), 400

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ GET (–ø—Ä–æ—Å—Ç–æ–π –∏ —Ä–∞–±–æ—á–∏–π)
@app.route('/button/<action>/<order_num>/<username>')
def handle_button(action, order_num, username):
    try:
        logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {action} –Ω–∞ –∑–∞–∫–∞–∑ #{order_num} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}")
        
        success, message = handle_order_action(order_num, action, username)
        
        if success:
            return f"‚úÖ {message}"
        else:
            return f"‚ùå {message}", 400
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}", 500

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
@app.route('/test_buttons')
def test_buttons():
    html = """
    <html>
    <body>
        <h2>–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #836</h2>
        <p>–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤:</p>
        <a href="/button/accept/836/–ê–ª–∏" style="padding:10px;background:green;color:white;margin:5px;">–ê–ª–∏: –ü—Ä–∏–Ω—è—Ç—å</a>
        <a href="/button/delivery/836/–ê–ª–∏" style="padding:10px;background:blue;color:white;margin:5px;">–ê–ª–∏: –í –ø—É—Ç–∏</a>
        <a href="/button/delivered/836/–ê–ª–∏" style="padding:10px;background:red;color:white;margin:5px;">–ê–ª–∏: –î–æ—Å—Ç–∞–≤–ª–µ–Ω</a>
        <br>
        <a href="/button/accept/836/–ê—Ö–º–∞–¥" style="padding:10px;background:green;color:white;margin:5px;">–ê—Ö–º–∞–¥: –ü—Ä–∏–Ω—è—Ç—å</a>
    </body>
    </html>
    """
    return html

@app.route('/')
def home():
    return "Peshras Delivery Bot is running! –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!"

if __name__ == '__main__':
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!")
    app.run(host='0.0.0.0', port=5000)
