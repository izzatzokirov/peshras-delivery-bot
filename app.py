from flask import Flask, request, jsonify
import requests
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8338994662:AAH7FALz3qd3F9dzcPadCVQY6CRPBXtFxiA"
CHANNEL_ID = "-1002967095913"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_to_telegram(order_data):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b> #{order_data.get('order_num', 'N/A')}\n"
        message += f"üë§ <b>–ò–º—è:</b> {order_data.get('order_person', 'N/A')}\n"
        message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data.get('order_phone', 'N/A')}\n"
        message += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {order_data.get('order_city', 'N/A')}, {order_data.get('order_address', 'N/A')}\n"
        message += f"üí∞ <b>–°—É–º–º–∞:</b> {order_data.get('order_sum', 0)} —Å–æ–º–æ–Ω–∏\n\n"
        
        message += "üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        if 'line' in order_data and isinstance(order_data['line'], list):
            for item in order_data['line']:
                if item.get('order_line_type_id') == 1:  # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã
                    message += f"‚Ä¢ {item.get('order_line_name', '–¢–æ–≤–∞—Ä')} x {item.get('order_line_quantity', 1)} - {item.get('order_line_sum', 0)} —Å–æ–º–æ–Ω–∏\n"
        
        message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {convert_unix_time(order_data.get('order_time', ''))}\n"
        message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order_data.get('order_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"accept_{order_data.get('order_num')}"},
                    {"text": "üöó –í –ø—É—Ç–∏", "callback_data": f"delivery_{order_data.get('order_num')}"}
                ],
                [
                    {"text": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "callback_data": f"delivered_{order_data.get('order_num')}"}
                ]
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": keyboard
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Unix time
def convert_unix_time(unix_time):
    try:
        return datetime.fromtimestamp(int(unix_time)).strftime('%Y-%m-%d %H:%M:%S')
    except:
        return unix_time

# Webhook –¥–ª—è storelend.ru
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç storelend.ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ form-data
        order_data_str = request.form.get('order_data')
        
        if not order_data_str:
            return jsonify({"status": "error", "message": "No order_data provided"}), 400
        
        # –ü–∞—Ä—Å–∏–º JSON
        import json
        order_data = json.loads(order_data_str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
        success = send_to_telegram(order_data)
        
        if success:
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order_data.get('order_num')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            return jsonify({"status": "success", "message": "Order processed"})
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            return jsonify({"status": "error", "message": "Telegram send failed"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 400

@app.route('/')
def home():
    return "Peshras Delivery Bot is running!"

if __name__ == '__main__':
    logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    app.run(host='0.0.0.0', port=5000, debug=False)
